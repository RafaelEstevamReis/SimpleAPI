<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Simple.API</name>
    </assembly>
    <members>
        <member name="T:Simple.API.ApiException">
            <summary>
            Represents an erro StatusCode
            </summary>
        </member>
        <member name="P:Simple.API.ApiException.Resource">
            <summary>
            Resource used
            </summary>
        </member>
        <member name="P:Simple.API.ApiException.StatusCode">
            <summary>
            Status code returned
            </summary>
        </member>
        <member name="P:Simple.API.ApiException.Response">
            <summary>
            Response returned
            </summary>
        </member>
        <member name="T:Simple.API.Client">
            <summary>
            Simple json-based api client with more information
            </summary>
        </member>
        <member name="F:Simple.API.Client.BaseUri">
            <summary>
            Base url of the API
            </summary>
        </member>
        <member name="M:Simple.API.Client.#ctor(System.String)">
            <summary>
            Creates a new insance
            </summary>
            <param name="baseUrl">Base url of the API</param>
        </member>
        <member name="M:Simple.API.Client.ConfigureHttpClient(System.Action{System.Net.Http.HttpClient})">
            <summary>
            Configures the underlying HttpClient
            </summary>
        </member>
        <member name="M:Simple.API.Client.GetAsync``1(System.String)">
            <summary>
            Sends a Get request and process the returned content
            </summary>
            <typeparam name="T">Return type</typeparam>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
        </member>
        <member name="M:Simple.API.Client.DeleteAsync(System.String)">
            <summary>
            Sends a Delete request
            </summary>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
        </member>
        <member name="M:Simple.API.Client.PostAsync``1(System.String,System.Object)">
            <summary>
            Sends a Post request and process the returned content
            </summary>
            <typeparam name="T">Return type</typeparam>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="value">Value to be sent</param>
        </member>
        <member name="M:Simple.API.Client.PostAsync(System.String,System.Object)">
            <summary>
            Sends a Post request
            </summary>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="value">Value to be sent</param>
        </member>
        <member name="M:Simple.API.Client.PostAsync``1(System.String,System.Net.Http.HttpContent)">
            <summary>
            Sends a Post request with specified content and process the returned content
            </summary>
            <typeparam name="T">Return type</typeparam>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="content">Content to be sent</param>
        </member>
        <member name="M:Simple.API.Client.MultipartFormPostAsync``1(System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Sends a Post request with Multipart Form Data content and process the returned content
            </summary>
            <typeparam name="T">Return type</typeparam>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="values">Form values</param>
        </member>
        <member name="M:Simple.API.Client.FormUrlEncodedPostAsync``1(System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Sends a Post request with Form Url Encoded content and process the returned content
            </summary>
            <typeparam name="T">Return type</typeparam>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="values">Form values</param>
        </member>
        <member name="M:Simple.API.Client.PutAsync(System.String,System.Object)">
            <summary>
            Sends a Put request
            </summary>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="value">Value to be sent</param>
        </member>
        <member name="M:Simple.API.Client.PatchAsync(System.String,System.Object)">
            <summary>
            Sends a Patch request
            </summary>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="value">Value to be sent</param>
        </member>
        <member name="T:Simple.API.ClientInfo">
            <summary>
            Simple json-based api client
            </summary>
        </member>
        <member name="E:Simple.API.ClientInfo.ResponseDataReceived">
            <summary>
            Response content event
            </summary>
        </member>
        <member name="F:Simple.API.ClientInfo.BaseUri">
            <summary>
            Base url of the API
            </summary>
        </member>
        <member name="M:Simple.API.ClientInfo.#ctor(System.String,System.Net.Http.HttpClientHandler)">
            <summary>
            Creates a new insance
            </summary>
            <param name="baseUrl">Base url of the API</param>
            <param name="clientHandler">Optional HttpClientHandler to configure</param>
        </member>
        <member name="M:Simple.API.ClientInfo.ConfigureHttpClient(System.Action{System.Net.Http.HttpClient})">
            <summary>
            Configures the underlying HttpClient
            </summary>
        </member>
        <member name="M:Simple.API.ClientInfo.SetAuthorization(System.String)">
            <summary>
            Set Authorization header
            </summary>
        </member>
        <member name="M:Simple.API.ClientInfo.SetAuthorizationBearer(System.String)">
            <summary>
            Set Authorization header with a Bearer token
            </summary>
        </member>
        <member name="M:Simple.API.ClientInfo.RemoveAuthorization">
            <summary>
            Remove Authorization header
            </summary>
        </member>
        <member name="M:Simple.API.ClientInfo.SetHeader(System.String,System.String)">
            <summary>
            Set DefaultRequestHeaders
            </summary>
        </member>
        <member name="M:Simple.API.ClientInfo.GetAsync``1(System.String)">
            <summary>
            Sends a Get request and process the returned content
            </summary>
            <typeparam name="T">Return type</typeparam>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
        </member>
        <member name="M:Simple.API.ClientInfo.DeleteAsync(System.String)">
            <summary>
            Sends a Delete request
            </summary>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
        </member>
        <member name="M:Simple.API.ClientInfo.PostAsync``1(System.String,System.Object)">
            <summary>
            Sends a Post request and process the returned content
            </summary>
            <typeparam name="T">Return type</typeparam>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="value">Value to be sent</param>
        </member>
        <member name="M:Simple.API.ClientInfo.PostAsync(System.String)">
            <summary>
            Sends a Post request
            </summary>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
        </member>
        <member name="M:Simple.API.ClientInfo.PostAsync(System.String,System.Object)">
            <summary>
            Sends a Post request
            </summary>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="value">Value to be sent</param>
        </member>
        <member name="M:Simple.API.ClientInfo.PostAsync``1(System.String,System.Net.Http.HttpContent)">
            <summary>
            Sends a Post request with specified content and process the returned content
            </summary>
            <typeparam name="T">Return type</typeparam>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="content">Content to be sent</param>
        </member>
        <member name="M:Simple.API.ClientInfo.MultipartFormPostAsync``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Sends a Post request with Multipart Form Data content and process the returned content
            </summary>
            <typeparam name="T">Return type</typeparam>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="fields">Form values</param>
        </member>
        <member name="M:Simple.API.ClientInfo.MultipartFormPostAsync``1(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Sends a Post request with Multipart Form Data content and process the returned content
            </summary>
            <typeparam name="T">Return type</typeparam>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="fields">Form values</param>
        </member>
        <member name="M:Simple.API.ClientInfo.MultipartFormPostAsync``1(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Sends a Post request with Multipart Form Data content and process the returned content
            </summary>
            <typeparam name="T">Return type</typeparam>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="fields">Form values</param>
        </member>
        <member name="M:Simple.API.ClientInfo.FormUrlEncodedPostAsync``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Sends a Post request with Form Url Encoded content and process the returned content
            </summary>
            <typeparam name="T">Return type</typeparam>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="fields">Form values</param>
        </member>
        <member name="M:Simple.API.ClientInfo.FormUrlEncodedPostAsync``1(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Sends a Post request with Form Url Encoded content and process the returned content
            </summary>
            <typeparam name="T">Return type</typeparam>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="fields">Form values</param>
        </member>
        <member name="M:Simple.API.ClientInfo.FormUrlEncodedPostAsync``1(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Sends a Post request with Form Url Encoded content and process the returned content
            </summary>
            <typeparam name="T">Return type</typeparam>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="fields">Form values</param>
        </member>
        <member name="M:Simple.API.ClientInfo.FormUrlEncodedPostAsync``1(System.String,System.Object)">
            <summary>
            Sends a Post request with Form Url Encoded content and process the returned content
            </summary>
            <typeparam name="T">Return type</typeparam>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="values">Object with fields to be mapped</param>
        </member>
        <member name="M:Simple.API.ClientInfo.PutAsync(System.String,System.Object)">
            <summary>
            Sends a Put request
            </summary>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="value">Value to be sent</param>
        </member>
        <member name="M:Simple.API.ClientInfo.PatchAsync(System.String,System.Object)">
            <summary>
            Sends a Patch request
            </summary>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="value">Value to be sent</param>
        </member>
        <member name="M:Simple.API.ClientInfo.OptionsAsync(System.String,System.Object)">
            <summary>
            Sends an Options request
            </summary>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="value">Object with fields to be mapped</param>
        </member>
        <member name="M:Simple.API.ClientInfo.OptionsAsync(System.String,System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}})">
            <summary>
            Sends an Options request
            </summary>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="headers">Headers to be sent</param>
        </member>
        <member name="M:Simple.API.ClientInfo.OptionsAsync(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Sends an Options request
            </summary>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="headers">Headers to be sent</param>
        </member>
        <member name="T:Simple.API.ClientInfo.ResponseReceived">
            <summary>
            Response received data
            </summary>
        </member>
        <member name="P:Simple.API.ClientInfo.ResponseReceived.Received">
            <summary>
            DateTime of the response
            </summary>
        </member>
        <member name="P:Simple.API.ClientInfo.ResponseReceived.Uri">
            <summary>
            Request uri
            </summary>
        </member>
        <member name="P:Simple.API.ClientInfo.ResponseReceived.Content">
            <summary>
            Response content
            </summary>
        </member>
        <member name="P:Simple.API.ClientInfo.ResponseReceived.Success">
            <summary>
            Successful request
            </summary>
        </member>
        <member name="P:Simple.API.ClientInfo.ResponseReceived.StatusCode">
            <summary>
            StatusCode of the response
            </summary>
        </member>
        <member name="M:Simple.API.ClientInfo.ResponseReceived.ToString">
            <summary>
            Returns a string that represents the current object
            </summary>
        </member>
        <member name="T:Simple.API.ClientExtensions">
            <summary>
            Entensions for the client
            </summary>
        </member>
        <member name="M:Simple.API.ClientExtensions.SetAuthorization(Simple.API.Client,System.String)">
            <summary>
            Set Authorization header
            </summary>
        </member>
        <member name="M:Simple.API.ClientExtensions.SetAuthorizationBearer(Simple.API.Client,System.String)">
            <summary>
            Set Authorization header with a Bearer token
            </summary>
        </member>
        <member name="M:Simple.API.ClientExtensions.RemoveAuthorization(Simple.API.Client)">
            <summary>
            Remove Authorization header
            </summary>
        </member>
        <member name="M:Simple.API.ClientExtensions.GetAsync``1(Simple.API.Client,System.String,System.Int32)">
            <summary>
            Sends a Get request and process the returned content
            </summary>
            <typeparam name="T">Return type</typeparam>
            <param name="client">API client to use</param>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="id">Service/action id</param>
        </member>
        <member name="M:Simple.API.ClientExtensions.GetAsync``1(Simple.API.Client,System.String,System.Guid)">
            <summary>
            Sends a Get request and process the returned content
            </summary>
            <typeparam name="T">Return type</typeparam>
            <param name="client">API client to use</param>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="id">Service/action id</param>
        </member>
        <member name="M:Simple.API.ClientExtensions.GetAsync``1(Simple.API.Client,System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Sends a Get request and process the returned content
            </summary>
            <typeparam name="T">Return type</typeparam>
            <param name="client">API client to use</param>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="values">Url get parameters</param>
        </member>
        <member name="M:Simple.API.ClientExtensions.GetAsync``1(Simple.API.Client,System.String,System.Object)">
            <summary>
            Sends a Get request and process the returned content
            </summary>
            <typeparam name="T">Return type</typeparam>
            <param name="client">API client to use</param>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="p">Builds url get parameters</param>
        </member>
        <member name="M:Simple.API.ClientExtensions.DeleteAsync(Simple.API.Client,System.String,System.Int32)">
            <summary>
            Sends a Delete request
            </summary>
            <param name="client">API client to use</param>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="id">Service/action id</param>
        </member>
        <member name="M:Simple.API.ClientExtensions.DeleteAsync(Simple.API.Client,System.String,System.Guid)">
            <summary>
            Sends a Delete request
            </summary>
            <param name="client">API client to use</param>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="id">Service/action id</param>
        </member>
        <member name="M:Simple.API.ClientExtensions.PostAsync``1(Simple.API.Client,System.String,System.Object,System.Int32)">
            <summary>
            Sends a Post request and process the returned content
            </summary>
            <typeparam name="T">Return type</typeparam>
            <param name="client">API client to use</param>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="value">Value to be sent</param>
            <param name="id">Service/action id</param>
        </member>
        <member name="M:Simple.API.ClientExtensions.PostAsync``1(Simple.API.Client,System.String,System.Object,System.Guid)">
            <summary>
            Sends a Post request and process the returned content
            </summary>
            <typeparam name="T">Return type</typeparam>
            <param name="client">API client to use</param>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="value">Value to be sent</param>
            <param name="id">Service/action id</param>
        </member>
        <member name="M:Simple.API.ClientExtensions.PostAsync(Simple.API.Client,System.String,System.Object,System.Int32)">
            <summary>
            Sends a Post request
            </summary>
            <param name="client">API client to use</param>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="value">Value to be sent</param>
            <param name="id">Service/action id</param>
        </member>
        <member name="M:Simple.API.ClientExtensions.PostAsync(Simple.API.Client,System.String,System.Object,System.Guid)">
            <summary>
            Sends a Post request
            </summary>
            <param name="client">API client to use</param>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="value">Value to be sent</param>
            <param name="id">Service/action id</param>
        </member>
        <member name="M:Simple.API.ClientExtensions.PutAsync(Simple.API.Client,System.String,System.Object,System.Int32)">
            <summary>
            Sends a Put request
            </summary>
            <param name="client">API client to use</param>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="value">Value to be sent</param>
            <param name="id">Service/action id</param>
        </member>
        <member name="M:Simple.API.ClientExtensions.PutAsync(Simple.API.Client,System.String,System.Object,System.Guid)">
            <summary>
            Sends a Put request
            </summary>
            <param name="client">API client to use</param>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="value">Value to be sent</param>
            <param name="id">Service/action id</param>
        </member>
        <member name="M:Simple.API.ClientExtensions.PatchAsync(Simple.API.Client,System.String,System.Object,System.Int32)">
            <summary>
            Sends a Patch request
            </summary>
            <param name="client">API client to use</param>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="value">Value to be sent</param>
            <param name="id">Service/action id</param>
        </member>
        <member name="M:Simple.API.ClientExtensions.PatchAsync(Simple.API.Client,System.String,System.Object,System.Guid)">
            <summary>
            Sends a Patch request
            </summary>
            <param name="client">API client to use</param>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="value">Value to be sent</param>
            <param name="id">Service/action id</param>
        </member>
        <member name="T:Simple.API.ClientInfoExtensions">
            <summary>
            Entensions for the client
            </summary>
        </member>
        <member name="M:Simple.API.ClientInfoExtensions.GetAsync``1(Simple.API.ClientInfo,System.String,System.Int32)">
            <summary>
            Sends a Get request and process the returned content
            </summary>
            <typeparam name="T">Return type</typeparam>
            <param name="client">API client to use</param>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="id">Service/action id</param>
        </member>
        <member name="M:Simple.API.ClientInfoExtensions.GetAsync``1(Simple.API.ClientInfo,System.String,System.Guid)">
            <summary>
            Sends a Get request and process the returned content
            </summary>
            <typeparam name="T">Return type</typeparam>
            <param name="client">API client to use</param>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="id">Service/action id</param>
        </member>
        <member name="M:Simple.API.ClientInfoExtensions.GetAsync``1(Simple.API.ClientInfo,System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Sends a Get request and process the returned content
            </summary>
            <typeparam name="T">Return type</typeparam>
            <param name="client">API client to use</param>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="values">Url get parameters</param>
        </member>
        <member name="M:Simple.API.ClientInfoExtensions.GetAsync``1(Simple.API.ClientInfo,System.String,System.Object)">
            <summary>
            Sends a Get request and process the returned content
            </summary>
            <typeparam name="T">Return type</typeparam>
            <param name="client">API client to use</param>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="p">Builds url get parameters</param>
        </member>
        <member name="M:Simple.API.ClientInfoExtensions.DeleteAsync(Simple.API.ClientInfo,System.String,System.Int32)">
            <summary>
            Sends a Delete request
            </summary>
            <param name="client">API client to use</param>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="id">Service/action id</param>
        </member>
        <member name="M:Simple.API.ClientInfoExtensions.DeleteAsync(Simple.API.ClientInfo,System.String,System.Guid)">
            <summary>
            Sends a Delete request
            </summary>
            <param name="client">API client to use</param>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="id">Service/action id</param>
        </member>
        <member name="M:Simple.API.ClientInfoExtensions.PostAsync``1(Simple.API.ClientInfo,System.String,System.Object,System.Int32)">
            <summary>
            Sends a Post request and process the returned content
            </summary>
            <typeparam name="T">Return type</typeparam>
            <param name="client">API client to use</param>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="value">Value to be sent</param>
            <param name="id">Service/action id</param>
        </member>
        <member name="M:Simple.API.ClientInfoExtensions.PostAsync``1(Simple.API.ClientInfo,System.String,System.Object,System.Guid)">
            <summary>
            Sends a Post request and process the returned content
            </summary>
            <typeparam name="T">Return type</typeparam>
            <param name="client">API client to use</param>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="value">Value to be sent</param>
            <param name="id">Service/action id</param>
        </member>
        <member name="M:Simple.API.ClientInfoExtensions.PostAsync(Simple.API.ClientInfo,System.String,System.Object,System.Int32)">
            <summary>
            Sends a Post request
            </summary>
            <param name="client">API client to use</param>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="value">Value to be sent</param>
            <param name="id">Service/action id</param>
        </member>
        <member name="M:Simple.API.ClientInfoExtensions.PostAsync(Simple.API.ClientInfo,System.String,System.Object,System.Guid)">
            <summary>
            Sends a Post request
            </summary>
            <param name="client">API client to use</param>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="value">Value to be sent</param>
            <param name="id">Service/action id</param>
        </member>
        <member name="M:Simple.API.ClientInfoExtensions.PutAsync(Simple.API.ClientInfo,System.String,System.Object,System.Int32)">
            <summary>
            Sends a Put request
            </summary>
            <param name="client">API client to use</param>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="value">Value to be sent</param>
            <param name="id">Service/action id</param>
        </member>
        <member name="M:Simple.API.ClientInfoExtensions.PutAsync(Simple.API.ClientInfo,System.String,System.Object,System.Guid)">
            <summary>
            Sends a Put request
            </summary>
            <param name="client">API client to use</param>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="value">Value to be sent</param>
            <param name="id">Service/action id</param>
        </member>
        <member name="M:Simple.API.ClientInfoExtensions.PatchAsync(Simple.API.ClientInfo,System.String,System.Object,System.Int32)">
            <summary>
            Sends a Patch request
            </summary>
            <param name="client">API client to use</param>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="value">Value to be sent</param>
            <param name="id">Service/action id</param>
        </member>
        <member name="M:Simple.API.ClientInfoExtensions.PatchAsync(Simple.API.ClientInfo,System.String,System.Object,System.Guid)">
            <summary>
            Sends a Patch request
            </summary>
            <param name="client">API client to use</param>
            <param name="service">Service to request from, will be concatenated with BaseUri</param>
            <param name="value">Value to be sent</param>
            <param name="id">Service/action id</param>
        </member>
        <member name="T:Simple.API.Helper">
            <summary>
            Helper class
            </summary>
        </member>
        <member name="M:Simple.API.Helper.BuildUrlEncodedUrl(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Builds an UrlEncoded url
            </summary>
            <param name="service">Service name</param>
            <param name="values">Parameteres to be encoded</param>
            <returns>Url with parameters url encoded</returns>
        </member>
        <member name="M:Simple.API.Helper.BuildUrlEncodedUrl(System.String,System.Object)">
            <summary>
            Builds an UrlEncoded url
            </summary>
            <param name="service">Service name</param>
            <param name="p">Object to extract parameters from</param>
            <returns>Url with parameters url encoded</returns>
        </member>
        <member name="T:Simple.API.JwtBase">
            <summary>
            A base for JWT decoding
            </summary>
        </member>
        <member name="P:Simple.API.JwtBase.OriginalToken">
            <summary>
            Original parsed Token
            </summary>
        </member>
        <member name="P:Simple.API.JwtBase.Header">
            <summary>
            JWT Header text
            </summary>
        </member>
        <member name="P:Simple.API.JwtBase.Payload">
            <summary>
            JWT Payload text
            </summary>
        </member>
        <member name="P:Simple.API.JwtBase.Signature">
            <summary>
            JWT signature bytes
            </summary>
        </member>
        <member name="M:Simple.API.JwtBase.ParseText(System.String)">
            <summary>
            Parses JWT
            </summary>
        </member>
        <member name="T:Simple.API.JWT`1">
            <summary>
            A base for JWT decoding
            </summary>
        </member>
        <member name="P:Simple.API.JWT`1.Content">
            <summary>
            JWT content
            </summary>
        </member>
        <member name="M:Simple.API.JWT`1.Parse(System.String)">
            <summary>
            Parse JWT with T content
            </summary>
        </member>
        <member name="T:Simple.API.JWT">
            <summary>
            A JWT model for decoding
            </summary>
        </member>
        <member name="P:Simple.API.JWT.Content">
            <summary>
            JWT generic content
            </summary>
        </member>
        <member name="M:Simple.API.JWT.Parse(System.String)">
            <summary>
            Parse generic JWT
            </summary>
        </member>
        <member name="T:Simple.API.GenericJwt">
            <summary>
            JWT with rfc7519 recomended properties
            </summary>
        </member>
        <member name="P:Simple.API.GenericJwt.iss">
            <summary>
            Issuer
            </summary>
        </member>
        <member name="P:Simple.API.GenericJwt.exp">
            <summary>
            Expiration Time
            </summary>
        </member>
        <member name="P:Simple.API.GenericJwt.iat">
            <summary>
            Issued At
            </summary>
        </member>
        <member name="P:Simple.API.GenericJwt.nbf">
            <summary>
            Not Before
            </summary>
        </member>
        <member name="P:Simple.API.GenericJwt.sub">
            <summary>
            Subject
            </summary>
        </member>
        <member name="P:Simple.API.GenericJwt.aud">
            <summary>
            Audience
            </summary>
        </member>
        <member name="P:Simple.API.GenericJwt.GetExp">
            <summary>
            Expiration Time
            </summary>
        </member>
        <member name="P:Simple.API.GenericJwt.GetIat">
            <summary>
            Issued At
            </summary>
        </member>
        <member name="P:Simple.API.GenericJwt.GetNbf">
            <summary>
            Not Before
            </summary>
        </member>
        <member name="T:Simple.API.Response">
            <summary>
            API response
            </summary>
        </member>
        <member name="P:Simple.API.Response.Headers">
            <summary>
            Gets the collection of HTTP response headers
            </summary>
        </member>
        <member name="P:Simple.API.Response.ContentHeaders">
            <summary>
            Gets the collection of HTTP content headers
            </summary>
        </member>
        <member name="P:Simple.API.Response.RequestMessage">
            <summary>
            Gets or sets the request message which led to this response message
            </summary>
        </member>
        <member name="P:Simple.API.Response.IsSuccessStatusCode">
            <summary>
            Gets a value that indicates if the HTTP response was successful
            </summary>
        </member>
        <member name="P:Simple.API.Response.ReasonPhrase">
            <summary>
            Gets or sets the reason phrase which typically is sent by servers together with
            the status code
            </summary>
        </member>
        <member name="P:Simple.API.Response.StatusCode">
            <summary>
            Gets or sets the status code of the HTTP response
            </summary>
        </member>
        <member name="P:Simple.API.Response.ErrorResponseData">
            <summary>
            Gets string response on Non-SuccessStatusCode
            </summary>
        </member>
        <member name="M:Simple.API.Response.ParseErrorResponseData``1">
            <summary>
            Parses json ErrorResponseData as `T`
            </summary>
        </member>
        <member name="M:Simple.API.Response.Build(System.Net.Http.HttpResponseMessage)">
            <summary>
            Create a new isntance
            </summary>
        </member>
        <member name="T:Simple.API.Response`1">
            <summary>
            API Response with data
            </summary>
            <typeparam name="T">Data type</typeparam>
        </member>
        <member name="P:Simple.API.Response`1.Data">
            <summary>
            Deserialized data
            </summary>
        </member>
        <member name="M:Simple.API.Response`1.Build(System.Net.Http.HttpResponseMessage,System.Net.Http.Headers.HttpContentHeaders,`0,System.String)">
            <summary>
            Create a new isntance
            </summary>
        </member>
        <member name="T:Simple.API.Retry">
            <summary>
            Class to retry ClientInfo Calls
            </summary>
        </member>
        <member name="M:Simple.API.Retry.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:Simple.API.Retry.Register(System.Net.HttpStatusCode,System.Func{System.Boolean})">
            <summary>
            Register a ResponseCode handler
            </summary>
            <param name="responseCode">ResponseCode to trigger for</param>
            <param name="action">Action to be executed. True to retry, False to pass</param>
        </member>
        <member name="M:Simple.API.Retry.Unregister(System.Net.HttpStatusCode)">
            <summary>
            Unregister a handler
            </summary>
        </member>
        <member name="M:Simple.API.Retry.GetRegisteredHandlers">
            <summary>
            Get all registered handlers
            </summary>
        </member>
        <member name="M:Simple.API.Retry.DoAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Exeutes a retriable call.
            The call will retry once
            </summary>
        </member>
    </members>
</doc>
